/*
#ifndef GP2Y_H
#define GP2Y_H
#include <Arduino.h>

#define RANGE_COUNT 3 
typedef int range_values[RANGE_COUNT];

void get_range_values(range_values vals);

#endif 
*/


/*

#define NUM_CHANNELS 4                                      // Number of ADC channels to sample
volatile uint16_t adc_values[NUM_CHANNELS];                      // Store ADC results
volatile uint8_t current_channel = 0;                       // Track ADC channel 

void adc_init(){
    ADMUX = (1 << REFS0);                                   // AVcc as reference, start with A0
    ADCSRA = (1 << ADEN) |                                  // Enable ADC
             (1 << ADATE) |                                 // Auto trigger enable
             (1 << ADIE) |                                  // Enable ADC interrupt
             (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // Prescaler = 128 (125kHz ADC clock)

    ADCSRB = 0;                                             // Free-running mode
    ADCSRA |= (1 << ADSC);                                  // Start ADC conversion
}

ISR(ADC_vect) {
    adc_values[current_channel] = ADC;                      // Store ADC result
    current_channel++;  
    if (current_channel >= NUM_CHANNELS) {
        current_channel = 0;                                // Reset channel index
    }

    ADMUX = (ADMUX & 0xF8) | current_channel;               // Switch ADC channel
    ADCSRA |= (1 << ADSC);                                  // Start new conversion
}

*/

/*
#ifndef ADC_H
#define ADC_H 
#include <Arduino.h>

#define ADC_COUNT 4
typedef int line_sensor_vals[ADC_COUNT];
void get_line_sensor_vals(line_sensor_vals vals);

#endif


void adc_init(void);

adc_input_values adc_vals;
get_adc_input_values(adc_vals);
int front_left = adc_vals[2];

val[0] = pin A3
val[1] = pin A0 
val[2] = pin A1
val[3] = pin A2
*/





